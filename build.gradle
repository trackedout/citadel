plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.20'
    id "com.gradleup.shadow" version "8.3.0"
    id "java"
    id "xyz.jpenilla.run-paper" version "2.3.0" // https://github.com/jpenilla/run-task
}

group = "org.trackedout"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://repo.aikar.co/content/groups/aikar/"
    }
    maven {
        url = "https://jitpack.io"
    }
}

println "Agronet jar: ${property('agronet_jar')}"

dependencies {
    compileOnly "io.papermc.paper:paper-api:1.20.2-R0.1-SNAPSHOT"
    implementation "commons-io:commons-io:2.13.0"
    implementation "co.aikar:acf-paper:0.5.1-SNAPSHOT"

    implementation group: "org.apache.commons", name: "commons-lang3", version: "3.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.9.22"
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.1'
    implementation "com.charleskorn.kaml:kaml:0.61.0"

    // Dunga Dunga API client libraries
    implementation "com.squareup.moshi:moshi-kotlin:1.14.0"
    implementation "com.squareup.moshi:moshi-adapters:1.14.0"
    implementation "com.squareup.okhttp3:okhttp:4.11.0"

    implementation files(property('agronet_jar'))

    implementation("org.mongodb:mongodb-driver-kotlin-sync:5.2.0")
    implementation("org.mongodb:bson-kotlinx:5.2.0")

    // https://docs.saicone.com/rtag
    implementation 'com.saicone.rtag:rtag:1.4.4'
    implementation 'com.saicone.rtag:rtag-block:1.4.4'
    implementation 'com.saicone.rtag:rtag-entity:1.4.4'
    implementation 'com.saicone.rtag:rtag-item:1.4.4'

    compileOnly 'me.devnatan:inventory-framework-platform-bukkit:3.0.8'
    runtimeOnly 'me.devnatan:inventory-framework-platform-bukkit:3.0.8'

    implementation 'xyz.upperlevel.spigot.book:spigot-book-api:1.6'

    // https://github.com/MegavexNetwork/scoreboard-library/blob/main/INSTALLATION.md
    var scoreboardLibraryVersion = "2.1.6"
    implementation "net.megavex:scoreboard-library-api:$scoreboardLibraryVersion"
    implementation "net.megavex:scoreboard-library-extra-kotlin:$scoreboardLibraryVersion" // Kotlin specific extensions (optional)
    runtimeOnly "net.megavex:scoreboard-library-implementation:$scoreboardLibraryVersion"
    runtimeOnly "net.megavex:scoreboard-library-modern:$scoreboardLibraryVersion" // 1.17+

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

test {
    useJUnitPlatform()

    if (System.properties['test.profile'] != 'integration') {
        exclude 'org/trackedout/citadel/integration'
    }
    outputs.upToDateWhen { false }
}

tasks.register('test2', Test) {
    exclude 'org/trackedout/citadel/integration'
}

tasks.register('testInteg', Test) {
    outputs.upToDateWhen { false }

    include 'org/trackedout/citadel/integration'
}

def targetJavaVersion = 21

compileKotlin {
    kotlinOptions.javaParameters = true
    kotlinOptions.jvmTarget = targetJavaVersion
}

kotlin {
    jvmToolchain(targetJavaVersion)
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)

    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

shadowJar {
    relocate "co.aikar.commands", "org.trackedout.citadel.acf"
    relocate "co.aikar.locales", "org.trackedout.citadel.locales"
    relocate "com.saicone.rtag", project.group + ".libs.rtag"
    relocate "org.trackedout.client", project.group + ".libs.dungadunga"
    relocate "xyz.upperlevel.spigot.book", project.group + ".libs.spigot.book"
}

build.dependsOn shadowJar

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.20.1")
    }
}
